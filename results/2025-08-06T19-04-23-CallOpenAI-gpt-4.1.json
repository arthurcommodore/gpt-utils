"ewogICJpZCI6ICJyZXNwXzY4OTNkMTY2MzAzYzgxOWQ5NzNlYzIyNzMxNWZiYzE4MDkyMmQ1Mzg1MGQ5MDUyYSIsCiAgIm9iamVjdCI6ICJyZXNwb25zZSIsCiAgImNyZWF0ZWRfYXQiOiAxNzU0NTE3ODYyLAogICJzdGF0dXMiOiAiY29tcGxldGVkIiwKICAiYmFja2dyb3VuZCI6IGZhbHNlLAogICJlcnJvciI6IG51bGwsCiAgImluY29tcGxldGVfZGV0YWlscyI6IG51bGwsCiAgImluc3RydWN0aW9ucyI6IG51bGwsCiAgIm1heF9vdXRwdXRfdG9rZW5zIjogbnVsbCwKICAibWF4X3Rvb2xfY2FsbHMiOiBudWxsLAogICJtb2RlbCI6ICJncHQtNC4xLTIwMjUtMDQtMTQiLAogICJvdXRwdXQiOiBbCiAgICB7CiAgICAgICJpZCI6ICJtc2dfNjg5M2QxNjZiMGI4ODE5ZGEwZGRjYjQ4ZTE5MWQyM2YwOTIyZDUzODUwZDkwNTJhIiwKICAgICAgInR5cGUiOiAibWVzc2FnZSIsCiAgICAgICJzdGF0dXMiOiAiY29tcGxldGVkIiwKICAgICAgImNvbnRlbnQiOiBbCiAgICAgICAgewogICAgICAgICAgInR5cGUiOiAib3V0cHV0X3RleHQiLAogICAgICAgICAgImFubm90YXRpb25zIjogW10sCiAgICAgICAgICAibG9ncHJvYnMiOiBbXSwKICAgICAgICAgICJ0ZXh0IjogIlVuZGVyIGEgc2t5IHNwcmlua2xlZCB3aXRoIHR3aW5rbGluZyBzdGFycywgYSBnZW50bGUgdW5pY29ybiBuYW1lZCBMdW5hIGxlYXB0IG92ZXIgcmFpbmJvd3MsIHdlYXZpbmcgZHJlYW1zIG9mIGhvcGUgYW5kIG1hZ2ljIGZvciBhbGwgdGhlIGNoaWxkcmVuIGZhc3QgYXNsZWVwIGJlbG93LiIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJyb2xlIjogImFzc2lzdGFudCIKICAgIH0KICBdLAogICJwYXJhbGxlbF90b29sX2NhbGxzIjogdHJ1ZSwKICAicHJldmlvdXNfcmVzcG9uc2VfaWQiOiBudWxsLAogICJwcm9tcHRfY2FjaGVfa2V5IjogbnVsbCwKICAicmVhc29uaW5nIjogewogICAgImVmZm9ydCI6IG51bGwsCiAgICAic3VtbWFyeSI6IG51bGwKICB9LAogICJzYWZldHlfaWRlbnRpZmllciI6IG51bGwsCiAgInNlcnZpY2VfdGllciI6ICJkZWZhdWx0IiwKICAic3RvcmUiOiB0cnVlLAogICJ0ZW1wZXJhdHVyZSI6IDEuMCwKICAidGV4dCI6IHsKICAgICJmb3JtYXQiOiB7CiAgICAgICJ0eXBlIjogInRleHQiCiAgICB9CiAgfSwKICAidG9vbF9jaG9pY2UiOiAiYXV0byIsCiAgInRvb2xzIjogW10sCiAgInRvcF9sb2dwcm9icyI6IDAsCiAgInRvcF9wIjogMS4wLAogICJ0cnVuY2F0aW9uIjogImRpc2FibGVkIiwKICAidXNhZ2UiOiB7CiAgICAiaW5wdXRfdG9rZW5zIjogMTgsCiAgICAiaW5wdXRfdG9rZW5zX2RldGFpbHMiOiB7CiAgICAgICJjYWNoZWRfdG9rZW5zIjogMAogICAgfSwKICAgICJvdXRwdXRfdG9rZW5zIjogMzYsCiAgICAib3V0cHV0X3Rva2Vuc19kZXRhaWxzIjogewogICAgICAicmVhc29uaW5nX3Rva2VucyI6IDAKICAgIH0sCiAgICAidG90YWxfdG9rZW5zIjogNTQKICB9LAogICJ1c2VyIjogbnVsbCwKICAibWV0YWRhdGEiOiB7fQp9"